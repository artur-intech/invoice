# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on: [push]

jobs:
  build:
    runs-on: ubuntu-22.04
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
        - "5432:5432"
    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x

    - name: Load database schema
      run: PGPASSWORD=postgres psql -h localhost -U postgres -d test -f db/schema.sql

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

    - name: Test
      run: dotnet test --nologo --no-build /p:CollectCoverage=true /p:IncludeTestAssembly=true /p:CoverletOutputFormat=\"json,lcov,cobertura\" /p:CoverletOutput=./coverage/ /p:Exclude="[*]Intech.Invoice.Test.*%2c[*]*Fake*"
      env:
         PG_HOST: localhost
         PG_USER: postgres
         PG_PASSWORD: postgres
         PG_DATABASE: test

    - name: Code Coverage Summary
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: coverage/**/coverage.cobertura.xml
        badge: true
        format: markdown
        output: both

    - name: Sticky Pull Request Comment
      uses: marocchino/sticky-pull-request-comment@v2.5.0
      if: github.event_name == 'pull_request'
      with:
        recreate: true
        path: code-coverage-results.md